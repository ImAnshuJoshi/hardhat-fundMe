{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe_NotOwner();\n\ncontract FundMe {\n\n    using PriceConverter for uint256;\n\n\n    AggregatorV3Interface private s_priceFeed;\n    address private immutable i_owner;\n    mapping(address=>uint256) private s_addressToAmount;\n    address[] private s_funders;\n    uint256 public constant MINIMUM_USD = 50* 10 ** 18;\n\n    modifier onlyOwner{\n        if(msg.sender != i_owner) \n        revert FundMe_NotOwner();\n        _;\n    }\n\n    constructor(address priceFeed){\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n        i_owner = msg.sender;\n    }   \n\n    function fund() public payable{\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to fund more eth ....\"\n        );\n        s_addressToAmount[msg.sender]+=msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner{\n        payable(msg.sender).transfer(address(this).balance);\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++){\n            address funder = s_funders[funderIndex];\n            s_addressToAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n    }\n\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256){\n        return s_addressToAmount[fundingAddress];\n    }\n\n    function getVersion() public view returns(uint256){\n        return s_priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns(address){\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns(address){\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface){\n        return s_priceFeed;\n    } \n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    return uint256(answer * 10000000000);\n  }\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n    return ethAmountInUsd;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}